// Generated by CoffeeScript 1.10.0
(function() {
  var $, Database, Game, Humano, Mosquito, mainView, mosquito, myApp,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  myApp = new Framework7({
    material: true,
    pushState: true,
    swipePanel: 'left',
    swipePanelActiveArea: 56
  });

  $ = Dom7;

  mainView = myApp.addView('.view-main', {
    dynamicNavbar: true
  });

  Dom7.ajaxSetup({
    beforeSend: function() {
      return myApp.showIndicator();
    },
    complete: function() {
      return myApp.hideIndicator();
    }
  });

  Database = (function() {
    function Database() {
      this.name = "ZikaGame";
      this.version = "1.0";
      this.displayName = "ZikaGame";
      this.maxSize = 65536;
      this.db = openDatabase(this.name, this.version, this.displayName, this.maxSize);
    }

    Database.prototype.sqlExecute = function(query, func, parameters) {
      if (parameters == null) {
        parameters = null;
      }
      return this.db.transaction(function(transaction) {
        return transaction.executeSql(query, parameters, function(transaction, result) {
          return func(result);
        }, function(transaction, error) {
          return alert(error.message);
        });
      });
    };

    return Database;

  })();

  Game = (function(superClass) {
    extend(Game, superClass);

    function Game(paginaContent) {
      this.vida = 100;
      this.$window = $(window);
      this.pontosJogo = $(".modo-humano-page .pontos");
      this.loopGerarConteudo = null;
      if (paginaContent != null) {
        this.paginaContent = paginaContent;
      } else {
        alert("Deu Problema Sério");
      }
    }

    Game.prototype.addVida = function(qtde) {
      return this.vida += qtde;
    };

    Game.prototype.addPontos = function(pontos) {
      return this.pontosJogo.text(parseInt(this.pontosJogo.text()) + pontos);
    };

    Game.prototype.getPontos = function() {
      return parseInt(this.pontosJogo.text());
    };

    Game.prototype.randomTop = function(height) {
      var aleatorio;
      aleatorio = Math.random() * this.$window.height() + 56;
      if (aleatorio + height >= this.$window.height()) {
        return (this.$window.height() - height) + "px";
      } else {
        return aleatorio + "px";
      }
    };

    Game.prototype.randomLeft = function(width) {
      var aleatorio;
      aleatorio = Math.random() * this.$window.width();
      if (aleatorio + width >= this.$window.width()) {
        return (this.$window.width() - width) + "px";
      } else {
        return aleatorio + "px";
      }
    };

    return Game;

  })(Database);

  Mosquito = (function(superClass) {
    extend(Mosquito, superClass);

    function Mosquito() {
      return Mosquito.__super__.constructor.apply(this, arguments);
    }

    Mosquito.prototype.loop = null;

    Mosquito.prototype.aparecer = function(num) {
      var $this, mosquito, results;
      $this = this;
      results = [];
      while (num > 0 && this.addVida(0) > 0) {
        mosquito = null;
        mosquito = $('<img class="mosquito" src="img/mosquito.png">');
        mosquito.css('top', $this.randomTop(36));
        mosquito.css('left', $this.randomLeft(36));
        mosquito.on('mousedown touchstart', function(e) {
          e.preventDefault();
          return $this.morrer($(this));
        });
        $this.paginaContent.append(mosquito);
        $this.sumir(mosquito);
        results.push(num--);
      }
      return results;
    };

    Mosquito.prototype.sumir = function(mosquito) {
      return setTimeout((function(_this) {
        return function() {
          if (mosquito.parents('html').length === 1) {
            mosquito.remove();
            return _this.reproduzir();
          }
        };
      })(this), 2500);
    };

    Mosquito.prototype.morrer = function(mosquito) {
      this.addPontos(1);
      return mosquito.remove();
    };

    Mosquito.prototype.reproduzir = function() {
      this.aparecer(2);
      return this.infectar();
    };

    Mosquito.prototype.infectar = function() {
      if (this.addVida(-5) === 0) {
        return mainView.router.load({
          url: "index.html"
        });
      }
    };

    Mosquito.prototype.gerarInimigo = function() {
      return this.loop = setInterval((function(_this) {
        return function() {
          if (_this.getPontos() === 0) {
            return _this.aparecer(1);
          } else {
            return _this.aparecer(Math.ceil(_this.getPontos() / 5));
          }
        };
      })(this), 2500);
    };

    return Mosquito;

  })(Game);

  Humano = (function(superClass) {
    extend(Humano, superClass);

    function Humano() {
      return Humano.__super__.constructor.apply(this, arguments);
    }

    Humano.prototype.aparecer = function() {};

    Humano.prototype.sumir = function() {};

    Humano.prototype.morrer = function() {};

    Humano.prototype.proteção = function() {};

    return Humano;

  })(Game);

  mosquito = null;

  myApp.onPageInit("modo-humano", function(page) {
    mosquito = new Mosquito($(".modo-humano"));
    mosquito.gerarInimigo();
    $(".pause-continue-game").on("click", function(e) {
      var $this;
      $this = $(this);
      e.preventDefault();
      return mosquito.pauseContinueJogo();
    });
  });

  myApp.onPageBeforeRemove("modo-humano", function(page) {
    return mosquito = null;
  });

}).call(this);

//# sourceMappingURL=Game.js.map
